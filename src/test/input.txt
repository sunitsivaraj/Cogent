     cogent producer

       @data
        var x : String = name
        var i:Int =0

        @behavior
          def A1() : Int  =>
            var A1x : String = A1name
            var A1i:Int =0


          def A2() : String =>
            var A2x : String = A2name
            var A2i:Int =0


        @cognitiveModel
          cm = X(a,b)

        net X(inp: P,Q; outp: Z)
          [P->A, Q->B; E->Z]
            @percepts
              evidence(A,0.5)
              evidence(B:"Test2",0.7)


        @explanations
          hypothesis(C:"Test3",0.3)
          hypothesis(D: "Test4",0.9)
          hypothesis(E,0.6)


        @goals
          goal(G:"MyGoal", 0.7)


        @actions
          action(A1: "MyAction", 0)


        @constraints
          C explains B at 0.5
          C contradicts D at 0.7
          [D, E] explains A at 0.6

        endnet
        endcogent